// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? 
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? 
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String @id  @map("_id")
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  stores        Store[]
  orders        Order[]
}

model Store {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?     
  userId      String
  User        User        @relation(fields: [userId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  Product     Product[]
  OrderItem   OrderItem[]

  @@index([userId])
}

model Category {
  slug     String    @id @map("_id")
  name     String
  products Product[]
}

model Product {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String
  description String?     
  price       String
  images      Json
  storeId     String
  Store       Store       @relation(fields: [storeId], references: [id])
  categoryId  String
  Category    Category    @relation(fields: [categoryId], references: [slug])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]

  @@index([storeId, categoryId, name, slug])
}

enum TRANSACTION_STATUS {
  PENDING
  PAID
  CANCELED
}

model Order {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  totalPrice       String
  token            String
  status           TRANSACTION_STATUS
  userId           String
  User             User               @relation(fields: [userId], references: [id])
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  orderItems       OrderItem[]

  @@index([userId])
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  storeId   String
  store     Store   @relation(fields: [storeId], references: [id])

  @@index([orderId])
  @@index([productId])
}
